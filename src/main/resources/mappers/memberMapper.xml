<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.MemberMapper">

    <!--
        MemberTBL에 존재하면 UPDATE 존재하지 않다면 TBL에 INSERT해 회원 관리
    -->
    <insert id="upsertMember" parameterType="com.example.entity.Member" >
        MERGE INTO
            MEMBERTBL
        USING DUAL
            ON USERID=#{userid}
        WHEN MATCHED THEN
            UPDATE SET NAME = #{name}, NICKNAME = #{nickname}, phone = #{phone}, EMAIL = #{email}
        WHEN NOT MATCHED THEN
            INSERT (USERID, USERPW, NAME, NICKNAME, EMAIL, PHONE, TYPE, BLOCK, REGDATE, ROLE) 
                VALUES( #{userid}, #{userpw}, #{name}, #{email} ,#{nickname}, #{phone}, 0, 1, CURRENT_DATE, 'CUSTOMER' )
    </insert>

    <insert id="upsertMinfo" parameterType="com.example.entity.Minfo" >
        MERGE INTO
            MINFOTBL
        USING DUAL
            ON USERID=#{userid}
        WHEN MATCHED THEN
            UPDATE SET AGE = #{age}, GENDER = #{gender}, URL = #{url}
        WHEN NOT MATCHED THEN
            INSERT (USERID, AGE, GENDER ) 
                VALUES( #{userid}, #{age}, #{gender} )
    </insert>

    <insert id="upsertToken" parameterType="com.example.entity.Token" >
        MERGE INTO
            TOKENTBL
        USING DUAL
            ON USERID=#{member.userid}
        WHEN MATCHED THEN
            UPDATE SET USERID = #{member.userid}
        WHEN NOT MATCHED THEN
            INSERT (TOKEN, USERID, REGDATE ) 
                VALUES( #{token} ,#{member.userid}, CURRENT_DATE )
    </insert>

    <insert id="insertMemberinfo" parameterType="com.example.entity.Minfo" >
        INSERT INTO MINFOTBL (USERID, AGE, GENDER, URL ) 
            VALUES( #{userid}, #{age}, #{gender}, #{url} )
    </insert>

    <select id="selectoneMember" parameterType="String" resultType="com.example.entity.Member" >
        SELECT M.* FROM MEMBERTBL M WHERE M.USERID = #{userid}
    </select>

    <select id="selectoneMemberinfo" parameterType="String" resultType="com.example.entity.Minfo" >
        SELECT M.* FROM MINFOTBL M WHERE M.USERID = #{userid}
    </select>

    <!--회원 필수정보 수정-->
    <update id="UpdateMember" parameterType="com.example.entity.Member">
        UPDATE MEMBERTBL SET  EMAIL=#{email}, NAME=#{name} , NICKNAME=#{nickname}, PHONE=#{phone} WHERE USERID = #{userid}
    </update>

    <!--회원 선택입력정보 수정-->
    <update id="UpdateMinfo" parameterType="com.example.entity.Minfo">
        UPDATE MINFOTBL SET AGE=#{age} , GENDER=#{gender} WHERE USERID = #{userid}
    </update>

    <!--회원 비밀번호 수정-->
    <update id="UpdatePassword" parameterType="map">
        UPDATE MEMBERTBL SET USERPW=#{userpw} WHERE USERID = #{userid}
    </update>

    <!--회원 선택입력정보 탈퇴처리(삭제)-->
    <delete id="deleteMinfo" parameterType="String">
        DELETE FROM MINFOTBL WHERE USERID = #{userid}
    </delete>

    <!--회원 필수정보 탈퇴처리(수정)-->
    <update id="updeleteMember" parameterType="String">
        UPDATE MEMBERTBL SET USERPW=null , NICKNAME=null, PHONE=null, ROLE=null, BLOCK=2 WHERE USERID = #{userid}
    </update>

    <!--회원 필수정보 탈퇴처리(수정)-->
    <select id="Email_Phone_selectMember" parameterType="map" resultType="com.example.entity.Member" >
        SELECT M.* FROM MEMBERTBL M WHERE M.EMAIL = #{email} AND M.PHONE = #{phone}
    </select>

    <!--회원 프로필 url 수정-->
    <update id="updateprofileurl" parameterType="map">
        UPDATE MINFOTBL SET URL=#{url} WHERE USERID = #{userid}
    </update>

</mapper>